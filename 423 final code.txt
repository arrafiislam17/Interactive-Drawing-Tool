import tkinter as tk
from tkinter import ttk
import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLUT import *
from math import cos, sin, pi


def draw_line():
    pygame.init()

    width, height = 800, 800
    pygame.display.set_mode((width, height), DOUBLEBUF | OPENGL)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0, width, height, 0, -1, 1)
    glMatrixMode(GL_MODELVIEW)

    lines = [] #store_lines

    drawing = False#drawing progress flag
    start_point = (0, 0)
    end_point = (0, 0)

    def find_zone(x0, y0, x1, y1):
        dx = x1 - x0
        dy = y1 - y0
        if dx >= 0 and dy >= 0:
            if abs(dx) >= abs(dy):
                return 0
            else:
                return 1
        if dx <= 0 and dy >= 0:
            if abs(dx) >= abs(dy):
                return 3
            else:
                return 2
        if dx <= 0 and dy <= 0:
            if abs(dx) >= abs(dy):
                return 4
            else:
                return 5
        if dx >= 0 and dy <= 0:
            if abs(dx) >= abs(dy):
                return 7
            else:
                return 6

    def convert_to_zz(zone, x0, y0, x1, y1):
        if zone == 0:
            return x0, y0, x1, y1
        elif zone == 1:
            return y0, x0, y1, x1
        elif zone == 2:
            return y0, -x0, y1, -x1
        elif zone == 3:
            return -x0, y0, -x1, y1
        elif zone == 4:
            return -x0, -y0, -x1, -y1
        elif zone == 5:
            return -y0, -x0, -y1, -x1
        elif zone == 6:
            return -y0, x0, -y1, x1
        else:
            return x0, -y0, x1, -y1

    def ConvertOriginal(zone, x0, y0):
        if zone == 0:
            return x0, y0
        elif zone == 1:
            return y0, x0
        elif zone == 2:
            return -y0, x0
        elif zone == 3:
            return -x0, y0
        elif zone == 4:
            return -x0, -y0
        elif zone == 5:
            return -y0, -x0
        elif zone == 6:
            return y0, -x0
        else:
            return x0, -y0

    def draw_line(x0, y0, x1, y1):
        Original_Zone = find_zone(x0, y0, x1, y1)
        Convert_Points = convert_to_zz(Original_Zone, x0, y0, x1, y1)
        x0, y0, x1, y1 = Convert_Points[0], Convert_Points[1], Convert_Points[2], Convert_Points[3]
        dx = x1 - x0
        dy = y1 - y0
        d = 2 * dy - dx
        dE = 2 * dy
        NE = 2 * (dy - dx)
        p = x0
        q = y0
        glColor3f(255, 0, 255)
        glBegin(GL_POINTS)
        while p <= x1:
            temp = ConvertOriginal(Original_Zone, p / 100, q / 100)
            glVertex2f(temp[0], temp[1])
            if d > 0:
                d = d + NE
                q = q + 1
            else:
                d = d + dE
            p += 1
        glEnd()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:  #mouse button click event check
                mouse_x, mouse_y = pygame.mouse.get_pos()
                if event.button == 1:  #left-mouse-button
                    if not drawing:  #if not start new line
                        start_point = (mouse_x, mouse_y)
                        end_point = (mouse_x, mouse_y)
                        drawing = True
            elif event.type == pygame.MOUSEMOTION:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                if drawing:  #if drawing update points
                    end_point = (mouse_x, mouse_y)
            elif event.type == pygame.MOUSEBUTTONUP: #mouse button up
                mouse_x, mouse_y = pygame.mouse.get_pos()
                if event.button == 1:
                    if drawing:  #if drawing end current line
                        end_point = (mouse_x, mouse_y)
                        lines.append((start_point, end_point))  #adding line to the list
                        drawing = False

            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
            glBegin(GL_LINES)
            glColor3f(0, 1, 0)
            for line in lines:
                line_start = line[0]
                line_end = line[1]
                glVertex2f(line_start[0], line_start[1])
                glVertex2f(line_end[0], line_end[1])
            if drawing:
                glVertex2f(start_point[0], start_point[1])
                glVertex2f(end_point[0], end_point[1])
            glEnd()
            pygame.display.flip()

    print("Line Drawing Option Selected")





def circle():
    #Pygame
    pygame.init()

    width, height = 800, 600
    pygame.display.set_mode((width, height), DOUBLEBUF | OPENGL)

    circles = []
    centers = []

    def drawPoints(x, y):
        glPointSize(2.0)
        glBegin(GL_POINTS)
        glVertex2f(x, y)
        glEnd()

    def draw_circle(center, radius):
        X = center[0]
        Y = center[1]

        d = 1 - radius
        x = 0
        y = radius
        while x <= y:
            x += 1
            if d < 0:
                d += 2 * x + 1
            else:
                y -= 1
                d += 2 * (x - y) + 1
            drawPoints(X + x, Y + y)
            drawPoints(X - x, Y + y)
            drawPoints(X + x, Y - y)
            drawPoints(X - x, Y - y)
            drawPoints(X + y, Y + x)
            drawPoints(X - y, Y + x)
            drawPoints(X + y, Y - x)
            drawPoints(X - y, Y - x)

    drawing_circle = False
    selected_center = None
    radius = None

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  #mouse button down
                    if not drawing_circle:
                        drawing_circle = True
                        if selected_center is None:
                            selected_center = event.pos
                            centers.append(selected_center)

            elif event.type == pygame.MOUSEMOTION:
                if event.buttons[
                    0] == 1 and drawing_circle and selected_center is not None:  #mouse buttone hold down
                    #circle radius
                    dx = event.pos[0] - selected_center[0]
                    dy = event.pos[1] - selected_center[1]
                    radius = int((dx ** 2 + dy ** 2) ** 0.5)
            elif event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1 and drawing_circle and selected_center is not None:  #mouse button up
                    #add to circles list
                    circles.append((selected_center, radius))
                    drawing_circle = False
                    selected_center = None

        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(0, width, height, 0, 0, 1)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

        glClear(GL_COLOR_BUFFER_BIT)


        for circle in circles:
            center, radius = circle
            draw_circle(center, radius)

        if drawing_circle and selected_center is not None and radius is not None:
            draw_circle(selected_center, radius)

        glColor3f(1.0, 0.0, 0.0)
        glPointSize(2)
        glBegin(GL_POINTS)
        for center in centers:
            glVertex2f(center[0], center[1])
        glEnd()

        pygame.display.flip()
        pygame.time.wait(10)
    print("Circle Drawing Option Selected")



root = tk.Tk()
root.title("Drawing Options")

# Set the background color to black
root.configure(bg="black")

# Increase the size of the window
root.geometry("400x400")

# Create a style for the buttons
style = ttk.Style()

# Configure the style for the button
style.configure("Fun.TButton",
                foreground="green",
                background="#3CAEA3", # Custom background color
                font=("Helvetica", 14),
                padding=10,
                relief=tk.FLAT, # Use flat relief style
                highlightcolor="#3CAEA3", # Custom hover color
                highlightthickness=4, # Add thicker hover effect
                focuscolor="white",
                focusthickness=0)
style.map("Fun.TButton",
          background=[("active", "#1A6178"), ("disabled", "grey")], # Custom active button color
          relief=[("pressed", tk.SUNKEN), ("!disabled", tk.RAISED)])

# Label for welcome message
welcome_label = ttk.Label(root, text="Welcome to Line and Circle Drawing Tool", font=("Helvetica", 16), background="black", foreground="red")
welcome_label.grid(row=0, column=0, columnspan=2, pady=20)

# Button for line drawing
line_button = ttk.Button(root, text="Draw Line", command=draw_line, style="Fun.TButton")
line_button.grid(row=1, column=0, padx=10, pady=10)

# Button for circle drawing
circle_button = ttk.Button(root, text="Draw Circle", command=circle, style="Fun.TButton")
circle_button.grid(row=1, column=1, padx=10, pady=10)

root.mainloop()
